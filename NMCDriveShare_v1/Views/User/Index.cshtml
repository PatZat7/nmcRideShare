
@using NMCDriveShare_v1.Models;
@using NMCDriveShare_v1.Models.ViewModels;
@model NMCDriveShare_v1.Models.ViewModels.UserSchedulesViewModel

@{
    ViewBag.Title = "Index";
}

<body>
    @*<div class="col-md-12">*@
    <div class="user-info row">
        <div class="left-side col-md-4">

        </div>
        <div class="right-side col-md-8">
            <p>@Model.Username</p>
            <p>@Model.LastName, @Model.FirstName</p>
            <p>Gender: @Model.Gender</p>
            <p>Driver <input id="viewType" type="checkbox" onclick="hideFunction()" @(Model.IsDriver ? " checked" : "") /> Rider</p>
        </div>
    </div>

	<datalist id="geolocation-names">
		@foreach (var item in (IDictionary<int, string>)ViewBag.GeolocationPairs)
		{
			<option value="@item.Value">@item.Value</option>
		}
	</datalist>



    <div id="rideList" class="userRideList row">

		<div class="ride row">
			@if (!string.IsNullOrEmpty(ViewBag.AddRideErrorMessage))
			{
				<p class="text-danger">@ViewBag.AddRideErrorMessage</p>
			}
			@using (Html.BeginForm("AddRide", "User", FormMethod.Post))
			{
				<div>
					<p>Departing From: <input type="text" name="SourceName" list="geolocation-names" /></p>
					<p>At: <input type="time" name="DepartingTime" /></p>
				</div>
				<div>
					<p>Destination: <input type="text" name="DestinationName" list="geolocation-names" /></p>
					<p>Until: <input type="time" name="ArrivalTime" /></p>
				</div>
				<div>
					<p>
						Days:
						Su <input class="checkbox" type="checkbox" name="CheckedSunday" />
						M <input class="checkbox" type="checkbox" name="CheckedMonday" />
						Tu <input class="checkbox" type="checkbox" name="CheckedTuesday" />
						W <input class="checkbox" type="checkbox" name="CheckedWednesday" />
						Th <input class="checkbox" type="checkbox" name="CheckedThursday" />
						F <input class="checkbox" type="checkbox" name="CheckedFriday" />
						Sa<input class="checkbox" type="checkbox" name="CheckedSaturday" />
					</p>
					@*<p>Scheduled: <input class="checkbox" type="checkbox" /></p>*@
				</div>
				<div><input type="submit" value="Submit" /></div>
			}
		</div>

        @foreach (RideRequestViewModel rr in Model.RideRequests)
        {
            <div class="ride row rideWidget">
				<div class="normal-view">
					<div>
						<p>Departing From: @rr.SourceName</p>
						<p>At: @rr.DepartingTime</p>
					</div>
					<div>
						<p>Destination: @rr.DestinationName</p>
						<p>Until: @rr.ArrivalTime</p>
					</div>
					<div>
						<p>
							Days:
							Su <input class="checkbox" type="checkbox" @(rr.CheckedSunday == "on" ? " checked" : "") disabled />
							M <input class="checkbox" type="checkbox" @(rr.CheckedMonday == "on" ? " checked" : "") disabled />
							Tu <input class="checkbox" type="checkbox" @(rr.CheckedTuesday == "on" ? " checked" : "") disabled />
							W <input class="checkbox" type="checkbox" @(rr.CheckedWednesday == "on" ? " checked" : "") disabled />
							Th <input class="checkbox" type="checkbox" @(rr.CheckedThursday == "on" ? " checked" : "") disabled />
							F <input class="checkbox" type="checkbox" @(rr.CheckedFriday == "on" ? " checked" : "") disabled />
							Sa<input class="checkbox" type="checkbox" @(rr.CheckedSaturday == "on" ? " checked" : "") disabled />
						</p>
						<p>Scheduled: <input class="checkbox" type="checkbox" /></p>
					</div>
					<div>
						@using (Html.BeginForm("RemoveRide", "User", FormMethod.Post))
						{
							<input type="hidden" name="requestNum" value="@rr.RequestNum" />
							<input type="submit" value="Delete" class="btn-danger" />
							<input type="button" value="Edit" class="btn-default"
								onclick="toggleRideEditState(event)" />
						}
					</div>
				</div>
				<div class="edit-view">
					@using (Html.BeginForm("EditRide", "User", FormMethod.Post))
					{
						<input type="hidden" name="id" value="@rr.RequestNum" />
						<input type="hidden" name="RequestNum" value="@rr.RequestNum" />
						<div>
							@*TODO: Turn ride requests into ride request view models with departing from and destination fields.*@
							<p>Departing From: <input type="text" name="SourceName" value="@rr.SourceName" list="geolocation-names" /></p>
							<p>At: <input type="time" name="DepartingTime" value="@rr.DepartingTime.ToString()" /></p>
						</div>
						<div>
							<p>Destination: <input type="text" name="DestinationName" value="@rr.DestinationName" list="geolocation-names" /></p>
							<p>Until: <input type="time" name="ArrivalTime" value="@rr.ArrivalTime.ToString()" /></p>
						</div>
						<div>
							<p>
								Days:
								Su <input class="checkbox" type="checkbox" name="CheckedSunday" @(rr.CheckedSunday == "on" ? " checked" : "") />
								M <input class="checkbox" type="checkbox" name="CheckedMonday" @(rr.CheckedMonday == "on" ? " checked" : "") />
								Tu <input class="checkbox" type="checkbox" name="CheckedTuesday" @(rr.CheckedTuesday == "on" ? " checked" : "") />
								W <input class="checkbox" type="checkbox" name="CheckedWednesday" @(rr.CheckedWednesday == "on" ? " checked" : "") />
								Th <input class="checkbox" type="checkbox" name="CheckedThursday" @(rr.CheckedThursday == "on" ? " checked" : "") />
								F <input class="checkbox" type="checkbox" name="CheckedFriday" @(rr.CheckedFriday == "on" ? " checked" : "") />
								Sa<input class="checkbox" type="checkbox" name="CheckedSaturday" @(rr.CheckedSaturday == "on" ? " checked" : "") />
							</p>
							@*<p>Scheduled: <input class="checkbox" type="checkbox" /></p>*@
						</div>
						<div>
							<input type="submit" value="Save" />
							<input type="button" value="Cancel"
								onclick="toggleRideEditState(event)" />
						</div>
					}
				</div>
            </div>
        }

    </div>

	<div id="routeList" class="userRouteList row">

		@for (int i = 0; i < 3; i++)
		{
			<div class="ride row">
				<div>
					<p>Departing From: Location here</p>
					<p>At: Time Here</p>
				</div>
				<div>
					<p>Destination: Location here</p>
					<p>Until: Time Here</p>
				</div>
				<div>
					<p>Days: Su M Tu W Th F Sa</p>
					<p>Seats: <input type="text" /></p>
				</div>
			</div>
		}


		<div class="ride row">
			<div>
				<p>Departing From: <input type="text" /></p>
				<p>At: <input type="text" /></p>
			</div>
			<div>
				<p>Destination: <input type="text" /></p>
				<p>Until: <input type="text" /></p>
			</div>
			<div>
				<p>Days: Su M Tu W Th F Sa</p>
				<p>Seats: <input type="text" /></p>
			</div>
			<div><input type="button" value="Submit" /></div>
		</div>






	</div>

    <div class="contactList row">
        @for (int i = 0; i < 10; i++)
        {
            <div>
                <div class="contactIcon">
                    <img width="32" height="32" alt="Icon" />
                </div>
                <div class="contactControls">
                    <p> Username <input class="btn-default" type="button" value="Chat" /> <input class="btn-default" type="button" value="To Map" /> <input class="btn-default" type="button" value="Remove" /></p>
                </div>

            </div>
        }


    </div>

    <div class="chat row">

    </div>

    @*</div>*@


</body>

<script>
	function toggleRideEditState(event) {
		// get coordinates
		var x = event.clientX; var y = event.clientY;

		// find the element that was clicked on
		var rideBoxes = document.getElementsByClassName("rideWidget");
		var target = null;

		// get screen coordinates (Source: https://plainjs.com/javascript/styles/get-the-position-of-an-element-relative-to-the-document-24/)
		var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
		var scrollTop = window.pageYOffset || document.documentElement.scrollTop;

		for (var i = 0; i < rideBoxes.length; i++) {
			var box = rideBoxes[i];
			var rect = box.getBoundingClientRect();

			// check if the click was inside the box
			if (((x >= rect.left + scrollLeft) && (x <= rect.right + scrollLeft))
				&& ((y >= rect.top + scrollTop) && (y <= rect.bottom + scrollTop)))
			{
				target = rideBoxes[i];
				break;
			}
		}

		if (target == null) {
			console.error("Faulty click event. No ride object found.");
			return;
		}

		// if ride is in edit mode, exit out of edit mode
		if (target.classList.contains("active")) {
			// remove active class and show normal view
			target.classList.remove("active");
			target.getElementsByClassName("normal-view")[0].style.display = "block";
			target.getElementsByClassName("edit-view")[0].style.display = "none";
		}
		else {
			// add active class and show edit view
			target.classList.add("active");
			target.getElementsByClassName("normal-view")[0].style.display = "none";
			target.getElementsByClassName("edit-view")[0].style.display = "block";
		}
	}

	// put each ride object in "normal mode"
	var rideWidgets = document.getElementsByClassName("rideWidget");
	for (var j = 0; j < rideWidgets.length; j++) {
		var box = rideWidgets[j];
		if (box.classList.contains("active")) box.classList.remove("active");

		box.getElementsByClassName("normal-view")[0].style.display = "block";
		box.getElementsByClassName("edit-view")[0].style.display = "none";
	}
</script>

<script>
	@*Toggles between the ride and route list.*@
	function hideFunction() {
		var x = document.getElementById('rideList');
		var y = document.getElementById('routeList');

		if (document.getElementById('viewType').checked) {
			x.style.display = "none";
			y.style.display = "block";
		}
		else {
			x.style.display = "block";
			y.style.display = "none";
		}

		@*location.href = "@Url.Action("Index", "Driver")";*@
	}
</script>